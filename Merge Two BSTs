merge two two bst
//the approach is to make the two bst as the vector thn merge the two sorted arrays and thn make 
void inorder(TreeNode<int>* root,vector<int> &ans)
{
    if(root==NULL)
      return;
    inorder(root->left,ans);
    ans.push_back(root->data);
    inorder(root->right,ans);
}
vector<int> mergeArray(vector<int> &a,vector<int> &b)
{
    vector<int> ans(a.size()+b.size());
    int i=0;
    int j=0;
    int k=0;
    while(i<a.size() && j<b.size())
    {
        if(a[i]<b[j])
        {
            ans[k]=a[i];
            k++;
            i++;
        }
        else
        {
            ans[k] = b[j];
            k++;
            j++;
        }
    }
    //if any one of the vectors gets over
    while(i<a.size())
    {
           ans[k] = a[i];
           k++;
           i++;
    }
    while(j<b.size())
    {
        ans[k] = b[j];
        k++;
        j++;
    }

    return ans;

}
TreeNode<int>* convert(int s,int e,vector<int>&ans)
{
    if(s>e)
      return NULL;
    
    int mid =(s+e)/2;
    TreeNode<int> * root = new TreeNode<int>(ans[mid]);
    root->left = convert(s,mid-1,ans);
    root->right = convert(mid+1,e,ans);

    return root;
}
TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2)
{
    //step 1
    //convert both the bst into vector
    vector<int> bst1,bst2;
    inorder(root1,bst1);
    inorder(root2,bst2);
    
    //step 2
    //merge the two sorted arrays
   vector<int> ans =  mergeArray(bst1,bst2);

    //step 3
    //convert the final sorted array toBST
    
   return convert(0,ans.size()-1,ans);


}

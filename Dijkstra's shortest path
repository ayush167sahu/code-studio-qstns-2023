#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &edge, int vertices, int edges, int source) 
{
	// Write your code here
	// 'edge' contains {u, v, distance} vectors

	// Return a vector of size 'vertices' denoting 
	// distances of source node to every node

	//first we have to create an adjency list oo pair;
	unordered_map<int,list<pair<int,int>>> adj;
	for(int i= 0;i<edges;i++)
	{
		int u = edge[i][0];
		int v = edge[i][1];
		int w = edge[i][2];

		//as this is an undirected graph
		adj[u].push_back(make_pair(v,w));
		adj[v].push_back(make_pair(u,w));

	}
	//making distance data structure
	vector<int> dist(vertices);
	for(int i = 0;i<vertices;i++)
	{
		dist[i] =INT_MAX;
	}

	//we have to make a set with pair to be inseterd in it with distance and node
	set<pair<int,int>> st;
	//setting the distsnce of source node from itself to zero
	dist[source] = 0;
	st.insert(make_pair(0,source));
	while(!st.empty())
	{
		auto frontNode = *(st.begin());

		//fetch the distance and node
		int NodeDistance = frontNode.first;
		int Node = frontNode.second;
		//remove the top record
		st.erase(st.begin());

		for(auto i:adj[Node])
		{
			if(NodeDistance+i.second<dist[i.first])
			{
				//then we will find the node with other value in set(if exits) erase and update it
				//finding the nodes duplicate
				auto dup = st.find(make_pair(dist[i.first],i.first));
				//when we use set.find() in c++ it either returns the element needed or it returns an iterator pointing to the end of the set
				if(dup != st.end())
				{
					st.erase(dup);
				}
				//after earsing it we will make new pair with new values and push it into set;

				dist[i.first] = NodeDistance+i.second;
				st.insert(make_pair(dist[i.first],i.first));
			}
		}
	}
	return dist;

}

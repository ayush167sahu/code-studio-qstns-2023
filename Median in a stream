Median in a stream
#include<bits/stdc++.h>
int signum(int a,int b)
{
	if(a==b)
	    return 0;
    else if(a>b)
	    return 1;
	else
	    return -1;
}
void callMedian(int element ,priority_queue<int> &maxi,priority_queue<int,vector<int>,greater<int>> &mini,int &median)
{
	switch( signum( maxi.size(),mini.size() ) )
	{
		//when the size of minheap and maxheap are equal thn push either into min or max heap
		case 0:if(element>median)//push into the min heap
		        {
                    mini.push(element);
					median = mini.top();
		        }
				else//push into the maxheap
				{
                    maxi.push(element);
					median = maxi.top();
				}
			break;

		//when the size of the maxheap is greater than the min heap     
	    case 1:if(element>median)
		        {
                    mini.push(element);
					median = (mini.top()+maxi.top())/2;
		         
				}
				else
				{
					//if we push into the maxheap the size becomes 2 which is not recommended
					mini.push(maxi.top());
					maxi.pop();
					maxi.push(element);
					median = (maxi.top()+mini.top())/2;

				}
			break;
        //when the size of the maxheap is less than the minheap
		case-1:if(element>median)
		        {
                   maxi.push(mini.top());
				   mini.pop();
				   mini.push(element);
				   median = (mini.top()+maxi.top())/2;

				}
				else
				{
					maxi.push(element);
					median = (mini.top()+maxi.top())/2;

				}
		    break;
	}
}
vector<int> findMedian(vector<int> &arr, int n)
{
	
	// Write your code here 
	vector<int> ans;
	priority_queue<int> maxi;
	priority_queue<int , vector<int>,greater<int>> mini;

	int median = 0;

	for(int i=0;i<n;i++)
	{
		callMedian(arr[i],maxi,mini,median);
		ans.push_back(median);
	}
	return ans;
}

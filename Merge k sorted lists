#include<queue>
class compare
{   public:
    bool operator()(Node<int>*a,Node<int>*b)
    {
        return a->data>b->data;
    }
};
Node<int>* mergeKLists(vector<Node<int>*> &listArray)
{
    // Write your code here.
    priority_queue<Node<int>* ,vector<Node<int>*>,compare> minHeap;
    int k = listArray.size(); 
    if(k==0)
      return NULL;
    //inserting the heads of the sorted linked lists
    for(int i=0;i<k;i++)
    {
       if(listArray[i]!=NULL)
        minHeap.push(listArray[i]);
      
    }

    Node<int>* head = NULL;
    Node<int>* tail = NULL;
    
    while(minHeap.size()>0)
    {
        Node<int>* top = minHeap.top();
        minHeap.pop();
        
        //pushing the next element after the minheap from the array
        if(top->next!=NULL)
        {
            minHeap.push(top->next);
        }
        if(head==NULL)
        {
            //inserting the first head;
            head=top;
            tail=top;
        } 
        else 
        {//connecting the rest of the nodes
          tail->next = top;
          tail = top;
        }
    }
    return head;
}

#include<bits/stdc++.h>
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) 
{
  // Write your code here.
  //we will solve this using kahn's algorithm which is implemented using BFS
  unordered_map<int,list<int>> adj;
  for(int i=0;i<edges.size();i++)
  {
    int u = edges[i].first;
    int v = edges[i].second;
    
    //as this is a directed graph only one side edge will exist
    adj[u].push_back(v);
  }
  //then we have to find the indegree
  vector<int> indegree(n+1);
  for(auto i:adj)
  {
    for(auto j:i.second)
    {
      indegree[j]++;
    }
  }
  //pushed the elments with 0 indregree
  queue<int> q;
  for(int i=1;i<=n;i++)
  {
    if(indegree[i]==0)
    {
      q.push(i);
    }
  }
  int count = 0;
  while(q.size()>0)
  {
    int front = q.front();
    q.pop();
    count++;
    for(auto i:adj[front])
    {
        indegree[i]--;
        if(indegree[i]==0)
        {
          q.push(i);
        }
    }
  }
  if(count==n)
  {
    return false;
  }

  return true;
}

Rat In A Maze
backtracking
#include <bits/stdc++.h> 
bool isSafe(int newx,int newy,int n,vector<vector<bool>> &vis,vector<vector<int>> &arr)
{
  if((newx>=0 && newx<n) && (newy>=0 && newy<n) && (vis[newx][newy]!=1) && (arr[newx][newy]==1))
   return true;
  else
   return false;
}
void solve(int x,int y,vector<vector<bool>> &vis,int n,vector<string> &ans,vector<vector<int>> &arr,string path)
{
    //base case
    if(x==n-1 && y==n-1)
    {
        ans.push_back(path);
        return;
    }

    //now we have to move the rat in D,L,R,U DIRECTIONS

    //down
    if(isSafe(x+1,y,n,vis,arr))
    {
       vis[x][y]=1;
       solve(x+1,y,vis,n,ans,arr,path+'D');
       vis[x][y]=0;
    }
    //left
    if(isSafe(x,y-1,n,vis,arr))
    {
       vis[x][y]=1;
      solve(x,y-1,vis,n,ans,arr,path+'L');
       vis[x][y]=0;
    }
    //right
    if(isSafe(x,y+1,n,vis,arr))
    {
       vis[x][y]=1;
      solve(x,y+1,vis,n,ans,arr,path+'R');
       vis[x][y]=0;
    }
    //up
    if(isSafe(x-1,y,n,vis,arr))
    {
       vis[x][y]=1;
      solve(x-1,y,vis,n,ans,arr,path+'U');
       vis[x][y]=0;
    }
    


}
vector < string > searchMaze(vector < vector < int >> & arr, int n) 
{
    // Write your code here.
    //approach 
    //we will take a visited array and mark it true it is visited
    //we will explore all the paths based on the movement and rrach to the destiona
    //and print the path then we will backtrack to the previous ones and explore all
    //leftover possible paths
    
    
    vector<vector<bool>> visited(n,vector<bool>(n,0));
    vector<string> ans;
    string path;
    if(arr[0][0]==0)
     return ans;

    //solve function to move to path D,L,R,U
    solve(0,0,visited,n,ans,arr,path);
    

    return ans;
}

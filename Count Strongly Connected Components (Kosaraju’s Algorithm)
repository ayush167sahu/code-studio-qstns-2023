Count Strongly Connected Components (Kosarajuâ€™s Algorithm)
//#include<list>
//#include<unordered_map>
//#include<stack>
#include<bits/stdc++.h>
void dfs(int node,unordered_map<int,bool>&vis,unordered_map<int,list<int>> &adj,stack<int> &st)
{
	vis[node]=true;

	for(auto nbr:adj[node])
	{
          if (!vis[nbr]) 
		  {
            dfs(nbr, vis, adj, st);
          }
        
	}

 st.push(node);
}
void revDfs(int node,unordered_map<int,bool>&vis,unordered_map<int,list<int>> &transpose)
{
	vis[node] = true;

   for(auto nbr:transpose[node])
   {
	   if(!vis[nbr])
	   {
		   revDfs(nbr,vis,transpose);
	   }
   }
}
int stronglyConnectedComponents(int v, vector<vector<int>> &edges)
{
	// Write your code here.
	//first we have to make adjacency list
	unordered_map<int,list<int>> adj;
	for(int i=0;i<edges.size();i++)
	{
		int u = edges[i][0];
		int v = edges[i][1];

		adj[u].push_back(v);
	}

	//thn we have to do topological sort
	stack<int> st;
	unordered_map<int,bool> vis;
	for(int i=0;i<v;i++)
	{
		if(!vis[i])
		{
			dfs(i,vis,adj,st);
		}
	}

	//thn we have to create the transpose with the value of the visited array marked as false
	unordered_map<int,list<int>> transpose;

	for(int i =0;i<v;i++)
	{
		vis[i]=0;
		for(auto nbr:adj[i])
		{
			transpose[nbr].push_back(i);
		}
	}

	//thn we have to traverse the stack
	int count=0;
	while(!st.empty())
	{
		int top = st.top();
		st.pop();
		if(!vis[top])
		{
			count++;
			revDfs(top,vis,transpose);
		}
	}
    return count;
}

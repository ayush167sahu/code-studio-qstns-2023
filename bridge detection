#include<bits/stdc++.h>
void dfs(int node,int &timer,int parent,vector<int> &disc,vector<int> &low,unordered_map<int,list<int>> &adj,unordered_map<int,bool>&vis,vector<vector<int>> &ans)
{
    vis[node]=true;
    low[node]=disc[node]=timer++;

    for(auto nbr:adj[node])
    {
        if(nbr==parent)
        {
            continue;
        }
        if(!vis[nbr])
        {
           dfs(nbr,timer,node,disc,low,adj,vis,ans);
           //while returning we have to update the low of the child acc to theie low if the child
           low[node] = min(low[node],low[nbr]);
           //while returning we also have to check whether the bridge is present or not
           if(low[nbr]>disc[node])//bridge is present
           {
                vector<int> res;
                res.push_back(node);
                res.push_back(nbr);
                ans.push_back(res);
           }
        }
        else
        {
            // it creates a back edge so the low of node is to be upadated
            low[node]= min(low[node],disc[nbr]);
        }

    }

}
vector<vector<int>> findBridges(vector<vector<int>> &edges, int v, int e) 
{
    // Write your code here
    unordered_map<int,list<int>> adj;
    for(int i=0;i<edges.size();i++)
    {
     int u = edges[i][0];
     int v = edges[i][1];

     adj[u].push_back(v);
     adj[v].push_back(u);  
    }
    //we have to make 4 data structures 
   
    vector<int> disc(v,-1);
    vector<int> low(v,-1);
    unordered_map<int,bool> vis;
    int timer= 0;
    int parent = -1;

    //dfs traversal
    vector<vector<int>> ans;
    for(int i=0;i<v;i++)
    {
       if(!vis[i])
       {
           dfs(i,timer,parent,disc,low,adj,vis,ans);
       }
    }
    return ans;

}

The N - Queens Puzzle
the following qstn is attemted through backtracking
which is implememted through recursion which means exploring all places
#include <bits/stdc++.h> 

void print(vector<vector<int>> &board,vector<vector<int>> &ans,int n)
{
	vector<int> temp;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			temp.push_back(board[i][j]);
		}
	}

   ans.push_back(temp);

}
bool isSafe(int row,int col,vector<vector<int>> &board,int n)
{
	//as we are filling the board from left to right 
	//and we are filling the q's in the so we need not to check in the column

	//we have to check for the 2 diagonals and one row

	//row;
	int x=row;
    int y=col;
	//column
	while(y>=0)
	{
		if(board[x][y]==1)
		   return false;

		y--;
	} 

	//upper diagonal
	 x=row;
	 y=col;
	while(x>=0 && y>=0)
	{
		if(board[x][y]==1)
		{
			return false;
		}
		x--;
		y--;
	}
	 x=row;
	 y=col;
	//lower diagonal
	while(x<n && y>=0)
	{
		if(board[x][y]==1)
		{
			return false;

		}
		x++;
		y--;
	}
	return true;
}
void solve(int col,vector<vector<int>> &board,vector<vector<int>> &ans,int n)
{
	//base case
	if(col == n)
	{
		print(board,ans,n);
		return;
	}

	for(int row = 0 ;row<n;row++)
	{
		if(isSafe(row,col,board,n))
		{
			//we have to place the queen 
			board[row][col]=1;
			//recursion call on the smaller matrix
			solve(col+1,board,ans,n);

			//thn we have to backtrack means we have to mark the Q as empty
			board[row][col] = 0;
		}
	}

}
vector<vector<int>> nQueens(int n)
{
	//approach 
	//we take a board which is initialised to 0;
	vector<vector<int>> board(n,vector<int>(n,0));
	vector<vector<int>> ans;

	solve(0,board,ans,n);

	return ans;

	
}

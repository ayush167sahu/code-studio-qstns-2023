#include<bits/stdc++.h>
bool dfs(int source,unordered_map<int,list<int>>&adj,unordered_map<int,bool>&visited)
{
    unordered_map<int,int> parent;
    queue<int> q;
    parent[source] = -1;
    visited[source]=1;

    q.push(source);

    while(!q.empty())
    {
        int front = q.front();
        q.pop();

        for(auto i:adj[front])
        {
            if(visited[i]==true && parent[front]!=i)
            {
                return true;
            }
            else if(!visited[i])
            {
                q.push(i);
                parent[i] = front;
                visited[i] = true;
            }
        } 
    }
    return false;

}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    unordered_map<int,list<int>> adj;

    for(int i=0;i<m;i++)
    {
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    //as this is a undirected graph we have to traverse from 0->n-1
    unordered_map<int,bool> visited;
    for(int i=0;i<n;i++)
    {
        if(!visited[i])
        {
            bool ans = dfs(i,adj,visited);
            if(ans==true)
            {
                return "Yes";
            }
        }
    }
    return "No";
}
